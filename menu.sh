#!/bin/bash

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

show_banner() {
    clear
    echo -e "${BLUE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    CONFIGURADOR DE M√ÅQUINA                   ‚ïë"
    echo "‚ïë                    Ubuntu & Rocky Linux 9                    ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

show_menu() {
    echo -e "${CYAN}üìã Escolha uma op√ß√£o:${NC}"
    echo ""
    echo -e "${YELLOW}1.${NC} üîç Verificar depend√™ncias"
    echo -e "${YELLOW}2.${NC} üíæ Fazer backup das configura√ß√µes"
    echo -e "${YELLOW}3.${NC} üöÄ Instalar tudo (backup + instala√ß√£o)"
    echo -e "${YELLOW}4.${NC} ‚öôÔ∏è  Instalar apenas (sem backup)"
    echo -e "${YELLOW}5.${NC} üîç Verificar instala√ß√£o"
    echo -e "${YELLOW}6.${NC} üìö Mostrar documenta√ß√£o"
    echo -e "${YELLOW}7.${NC} üîÑ Executar tudo em sequ√™ncia"
    echo -e "${YELLOW}0.${NC} üö™ Sair"
    echo ""
}

check_dependencies() {
    echo -e "${BLUE}üîç Verificando depend√™ncias...${NC}"
    echo ""
    
    if [ "$EUID" -eq 0 ]; then
        echo -e "${RED}‚ùå N√£o execute este script como root!${NC}"
        return 1
    fi
    
    if command -v curl &> /dev/null; then
        echo -e "${GREEN}‚úÖ curl encontrado${NC}"
    else
        echo -e "${RED}‚ùå curl n√£o encontrado${NC}"
        return 1
    fi
    
    if command -v git &> /dev/null; then
        echo -e "${GREEN}‚úÖ git encontrado${NC}"
    else
        echo -e "${RED}‚ùå git n√£o encontrado${NC}"
        return 1
    fi
    
    if command -v sudo &> /dev/null; then
        echo -e "${GREEN}‚úÖ sudo encontrado${NC}"
    else
        echo -e "${RED}‚ùå sudo n√£o encontrado${NC}"
        return 1
    fi
    
    echo ""
    echo -e "${GREEN}‚úÖ Todas as depend√™ncias est√£o dispon√≠veis!${NC}"
    return 0
}

run_backup() {
    echo -e "${BLUE}üíæ Executando backup...${NC}"
    echo ""
    
    if [ -f "./backup-config.sh" ]; then
        chmod +x ./backup-config.sh
        ./backup-config.sh
    else
        echo -e "${RED}‚ùå Script backup-config.sh n√£o encontrado!${NC}"
        return 1
    fi
}

run_installation() {
    echo -e "${BLUE}üöÄ Executando instala√ß√£o...${NC}"
    echo ""
    
    if [ -f "./setup-zsh.sh" ]; then
        chmod +x ./setup-zsh.sh
        ./setup-zsh.sh
    else
        echo -e "${RED}‚ùå Script setup-zsh.sh n√£o encontrado!${NC}"
        return 1
    fi
}

run_verification() {
    echo -e "${BLUE}üîç Verificando instala√ß√£o...${NC}"
    echo ""
    
    if [ -f "./verify-install.sh" ]; then
        chmod +x ./verify-install.sh
        ./verify-install.sh
    else
        echo -e "${RED}‚ùå Script verify-install.sh n√£o encontrado!${NC}"
        return 1
    fi
}

show_documentation() {
    echo -e "${BLUE}üìö Documenta√ß√£o:${NC}"
    echo ""
    echo -e "${CYAN}üìã O que √© instalado:${NC}"
    echo "‚Ä¢ ZSH com Oh My Zsh e Powerlevel10k"
    echo "‚Ä¢ Docker Engine com Docker Compose"
    echo "‚Ä¢ Node.js LTS via NVM"
    echo "‚Ä¢ Yarn, pnpm, TypeScript, ts-node, nodemon"
    echo "‚Ä¢ Make, CMake, pkg-config"
    echo "‚Ä¢ VS Code (se dispon√≠vel via snap)"
    echo "‚Ä¢ Fontes Nerd Fonts"
    echo "‚Ä¢ Plugins √∫teis para ZSH"
    echo ""
    echo -e "${CYAN}üéØ Aliases √∫teis:${NC}"
    echo "‚Ä¢ Git: gs, ga, gc, gp, gl, gco, gcb"
    echo "‚Ä¢ Docker: d, dc, dps, dpsa, di, dex, show, show_last, rebilda"
    echo "‚Ä¢ Node.js: n, nr, nrd, nrb, nrt"
    echo "‚Ä¢ Navega√ß√£o: ll, la, .., ..., ...., mkcd"
    echo ""
    echo -e "${CYAN}üìÅ Scripts dispon√≠veis:${NC}"
    echo "‚Ä¢ install.sh - Script principal (executa tudo)"
    echo "‚Ä¢ setup-zsh.sh - Script de instala√ß√£o"
    echo "‚Ä¢ backup-config.sh - Script de backup"
    echo "‚Ä¢ verify-install.sh - Script de verifica√ß√£o"
    echo ""
    echo -e "${YELLOW}üí° Dica: Execute a op√ß√£o 7 para fazer tudo em sequ√™ncia!${NC}"
}

run_all_sequence() {
    echo -e "${BLUE}üîÑ Executando tudo em sequ√™ncia...${NC}"
    echo ""
    
    echo -e "${YELLOW}1. Verificando depend√™ncias...${NC}"
    if ! check_dependencies; then
        echo -e "${RED}‚ùå Falha na verifica√ß√£o de depend√™ncias${NC}"
        return 1
    fi
    
    echo ""
    echo -e "${YELLOW}2. Fazendo backup...${NC}"
    if ! run_backup; then
        echo -e "${RED}‚ùå Falha no backup${NC}"
        return 1
    fi
    
    echo ""
    echo -e "${YELLOW}3. Instalando...${NC}"
    if ! run_installation; then
        echo -e "${RED}‚ùå Falha na instala√ß√£o${NC}"
        return 1
    fi
    
    echo ""
    echo -e "${YELLOW}4. Verificando instala√ß√£o...${NC}"
    if ! run_verification; then
        echo -e "${RED}‚ùå Falha na verifica√ß√£o${NC}"
        return 1
    fi
    
    echo ""
    echo -e "${GREEN}üéâ Tudo executado com sucesso!${NC}"
}

process_choice() {
    local choice=$1
    
    case $choice in
        1)
            echo ""
            check_dependencies
            ;;
        2)
            echo ""
            run_backup
            ;;
        3)
            echo ""
            echo -e "${YELLOW}‚ö†Ô∏è  Esta op√ß√£o far√° backup e depois instalar√° tudo${NC}"
            read -p "Deseja continuar? (s/N): " -n 1 -r
            echo ""
            if [[ $REPLY =~ ^[Ss]$ ]]; then
                run_backup
                echo ""
                run_installation
            else
                echo -e "${YELLOW}‚ùå Opera√ß√£o cancelada${NC}"
            fi
            ;;
        4)
            echo ""
            echo -e "${YELLOW}‚ö†Ô∏è  Esta op√ß√£o instalar√° sem fazer backup${NC}"
            read -p "Deseja continuar? (s/N): " -n 1 -r
            echo ""
            if [[ $REPLY =~ ^[Ss]$ ]]; then
                run_installation
            else
                echo -e "${YELLOW}‚ùå Opera√ß√£o cancelada${NC}"
            fi
            ;;
        5)
            echo ""
            run_verification
            ;;
        6)
            echo ""
            show_documentation
            ;;
        7)
            echo ""
            echo -e "${YELLOW}‚ö†Ô∏è  Esta op√ß√£o executar√° tudo em sequ√™ncia${NC}"
            read -p "Deseja continuar? (s/N): " -n 1 -r
            echo ""
            if [[ $REPLY =~ ^[Ss]$ ]]; then
                run_all_sequence
            else
                echo -e "${YELLOW}‚ùå Opera√ß√£o cancelada${NC}"
            fi
            ;;
        0)
            echo ""
            echo -e "${GREEN}üëã At√© logo!${NC}"
            exit 0
            ;;
        *)
            echo ""
            echo -e "${RED}‚ùå Op√ß√£o inv√°lida!${NC}"
            ;;
    esac
}

main() {
    while true; do
        show_banner
        show_menu
        
        read -p "Digite sua escolha (0-7): " choice
        echo ""
        
        process_choice $choice
        
        echo ""
        echo -e "${CYAN}‚è≥ Pressione Enter para continuar...${NC}"
        read -r
    done
}

main 